/*
 * Copyright (C) 2010, Freescale Semiconductor, Inc. All Rights Reserved.
 * THIS SOURCE CODE IS CONFIDENTIAL AND PROPRIETARY AND MAY NOT
 * BE USED OR DISTRIBUTED WITHOUT THE WRITTEN PERMISSION OF
 * Freescale Semiconductor, Inc.
 *
 */
// StResource.cpp: implementation of the CStResource class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "resource.h"
//#include "..\StResource.dll\resource.h"
#include "StHeader.h"
#include "StGlobals.h"
#include "ddildl_defs.h"
#include "StConfigInfo.h"
#include "StCmdlineProcessor.h"
#include "StLogger.h"
#include "StProgress.h"
#include "StResource.h"
#include "StVersionInfo.h"
#include "StUpdater.h"
#include "StUpdaterApp.h"
#include "version.h"
#include "StByteArray.h"
//#include <winioctl.h>
#include "StScsi.h"
#include "..\\..\\common\\updater_res.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CStResource::CStResource( CStConfigInfo* _p_config_info, LANGID	_default_language)
{
	m_p_map_err_rid.InitHashTable( -1 * STERR_ERROR_OUT_OF_RANGE  );
	m_p_map_err_rid.SetAt( STERR_NONE, IDS_STERR_NONE );
	m_p_map_err_rid.SetAt( STERR_NO_MEMORY,	IDS_STERR_NO_MEMORY );
	m_p_map_err_rid.SetAt( STERR_INVALID_POS_IN_ARRAY,	IDS_STERR_INVALID_POS_IN_ARRAY );
	m_p_map_err_rid.SetAt( STERR_INVALID_REQUEST,	IDS_STERR_INVALID_REQUEST );
	m_p_map_err_rid.SetAt( STERR_INVALID_DRIVE_TYPE,	IDS_STERR_INVALID_DRIVE_TYPE );
	m_p_map_err_rid.SetAt( STERR_FUNCTION_NOT_SUPPORTED,	IDS_STERR_FUNCTION_NOT_SUPPORTED );
	m_p_map_err_rid.SetAt( STERR_DATA_INCOMPLETE,	IDS_STERR_DATA_INCOMPLETE );
	m_p_map_err_rid.SetAt( STERR_RES_ARRAY_UNINITIALIZED,	IDS_STERR_RES_ARRAY_UNINITIALIZED );
	m_p_map_err_rid.SetAt( STERR_INVALID_MEDIA_INFO_REQUEST,	IDS_STERR_INVALID_MEDIA_INFO_REQUEST );
	m_p_map_err_rid.SetAt( STERR_INVALID_DRIVE_INFO_REQUEST,	IDS_STERR_INVALID_DRIVE_INFO_REQUEST );
	m_p_map_err_rid.SetAt( STERR_PUT_DATA_SIZE_EXCEEDS_ARRAY_SIZE,	IDS_STERR_PUT_DATA_SIZE_EXCEEDS_ARRAY_SIZE );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_OPEN_FILE,	IDS_STERR_FAILED_TO_OPEN_FILE );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_READ_FILE_DATA,	IDS_STERR_FAILED_TO_READ_FILE_DATA );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_WRITE_FILE_DATA,	IDS_STERR_FAILED_TO_WRITE_FILE_DATA );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_FIND_DEVICE_IN_RECOVERY_MODE,	IDS_STERR_FAILED_TO_FIND_DEVICE_IN_RECOVERY_MODE );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_CREATE_EVENT_OBJECT,	IDS_STERR_FAILED_TO_CREATE_EVENT_OBJECT );	
	m_p_map_err_rid.SetAt( STERR_DEVICE_TIMEOUT,	IDS_STERR_DEVICE_TIMEOUT );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_OPEN_REGISTRY_KEY,	IDS_STERR_FAILED_TO_OPEN_REGISTRY_KEY );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_FIND_DRIVE_LETTER_IN_REGISTRY,	IDS_STERR_FAILED_TO_FIND_DRIVE_LETTER_IN_REGISTRY );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_LOAD_WNASPI32,	IDS_STERR_FAILED_TO_LOAD_WNASPI32 );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_GET_FUNCTION_PTR_IN_WNASPI32_DLL,	IDS_STERR_FAILED_TO_GET_FUNCTION_PTR_IN_WNASPI32_DLL );
	m_p_map_err_rid.SetAt( STERR_STATE_OF_WNASPI32_NOT_INITIALIZED,	IDS_STERR_STATE_OF_WNASPI32_NOT_INITIALIZED );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_LOCATE_SCSI_DEVICE,	IDS_STERR_FAILED_TO_LOCATE_SCSI_DEVICE );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_SEND_SCSI_COMMAND,	IDS_STERR_FAILED_TO_SEND_SCSI_COMMAND );
	m_p_map_err_rid.SetAt( STERR_INVALID_DEVICE_HANDLE,	IDS_STERR_INVALID_DEVICE_HANDLE );
	m_p_map_err_rid.SetAt( STERR_FAILED_DEVICE_IO_CONTROL,	IDS_STERR_FAILED_DEVICE_IO_CONTROL );
	m_p_map_err_rid.SetAt( STERR_DEVICE_STATE_UNINITALIZED,	IDS_STERR_DEVICE_STATE_UNINITALIZED );
	m_p_map_err_rid.SetAt( STERR_UNSUPPORTED_OPERATING_SYSTEM,	IDS_STERR_UNSUPPORTED_OPERATING_SYSTEM );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_LOAD_STRING,	IDS_STERR_FAILED_TO_LOAD_STRING );	
	m_p_map_err_rid.SetAt( STERR_NULL_DRIVE_OBJECT,	IDS_STERR_NULL_DRIVE_OBJECT );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_FIND_DRIVE_NUMBER,	IDS_STERR_FAILED_TO_FIND_DRIVE_NUMBER );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_LOCK_THE_DRIVE,	IDS_STERR_FAILED_TO_LOCK_THE_DRIVE );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_UNLOCK_THE_DRIVE,	IDS_STERR_FAILED_TO_UNLOCK_THE_DRIVE );
	m_p_map_err_rid.SetAt( STERR_BAD_CHS_SOLUTION,	IDS_STERR_BAD_CHS_SOLUTION );
	m_p_map_err_rid.SetAt( STERR_UNABLE_TO_CALCULATE_CHS,	IDS_STERR_UNABLE_TO_CALCULATE_CHS );
	m_p_map_err_rid.SetAt( STERR_UNABLE_TO_PACK_CHS,	IDS_STERR_UNABLE_TO_PACK_CHS );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_READ_SECTOR,	IDS_STERR_FAILED_TO_READ_SECTOR );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_WRITE_SECTOR,	IDS_STERR_FAILED_TO_WRITE_SECTOR );
	m_p_map_err_rid.SetAt( STERR_UNKNOWN_ERROR,		IDS_STERR_UNKNOWN_ERROR);
	m_p_map_err_rid.SetAt( STERR_INVALID_FILE_SYSTEM_REQUEST,	IDS_STERR_INVALID_FILE_SYSTEM_REQUEST);
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_DISMOUNT_THE_DRIVE,	IDS_STERR_FAILED_TO_DISMOUNT_THE_DRIVE);
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_LOAD_ICON,	IDS_STERR_FAILED_TO_LOAD_ICON);
	m_p_map_err_rid.SetAt( STERR_MISSING_CMDLINE_PARAMETER_FILENAME, IDS_STERR_MISSING_CMDLINE_PARAMETER_FILENAME);
	m_p_map_err_rid.SetAt( STERR_MEDIA_STATE_UNINITIALIZED, IDS_STERR_MEDIA_STATE_UNINITIALIZED);
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_LOAD_SETUPAPI_LIB, IDS_STERR_FAILED_TO_LOAD_SETUPAPI_LIB);
	m_p_map_err_rid.SetAt( STERR_MISSING_API_IN_SETUPAPI_LIB, IDS_STERR_MISSING_API_IN_SETUPAPI_LIB);
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_LOAD_CFGMGR32_LIB, IDS_STERR_FAILED_TO_LOAD_CFGMGR32_LIB);
	m_p_map_err_rid.SetAt( STERR_MISSING_API_IN_CFGMGR32_LIB, IDS_STERR_MISSING_API_IN_CFGMGR32_LIB);
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_GET_DEVICE_INFO_SET, IDS_STERR_FAILED_TO_GET_DEVICE_INFO_SET);
	m_p_map_err_rid.SetAt( STERR_FAILED_GET_DEVICE_REGISTRY_PROPERTY, IDS_STERR_FAILED_GET_DEVICE_REGISTRY_PROPERTY);
	m_p_map_err_rid.SetAt( STERR_ERROR_IN_CFGMGR32_API,	IDS_STERR_ERROR_IN_CFGMGR32_API );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_CREATE_MUTEX_OBJECT, IDS_STERR_FAILED_TO_CREATE_MUTEX_OBJECT );	
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_BRING_THE_RUNNING_APPLICATION_TO_FOREGROUND, IDS_STERR_FAILED_TO_BRING_THE_RUNNING_APPLICATION_TO_FOREGROUND );	
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_LOCATE_SCSI_DEVICE_ON_START, IDS_STERR_FAILED_TO_LOCATE_SCSI_DEVICE_ON_START );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_LOCATE_SCSI_DEVICE_ON_SHOW_VERSIONS, IDS_STERR_FAILED_TO_LOCATE_SCSI_DEVICE_ON_SHOW_VERSIONS );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_GET_DRIVE_MAP, IDS_STERR_FAILED_TO_GET_DRIVE_MAP );
	m_p_map_err_rid.SetAt( STERR_INVALID_DISK_INFO, IDS_STERR_INVALID_DISK_INFO );
	m_p_map_err_rid.SetAt( STERR_FAILED_READ_BACK_VERIFY_TEST, IDS_STERR_FAILED_READ_BACK_VERIFY_TEST );
	m_p_map_err_rid.SetAt( STERR_NO_ADMINISTRATOR, IDS_STERR_NO_ADMINISTRATOR );
	m_p_map_err_rid.SetAt( STERR_FAILED_TO_DELETE_SETTINGS_DOT_DAT_FILE, IDS_STERR_FAILED_TO_DELETE_SETTINGS_DOT_DAT_FILE );
	m_p_map_err_rid.SetAt( STERR_MANUAL_RECOVERY_REQUIRED, IDS_STERR_MANUAL_RECOVERY_REQUIRED );

	m_p_map_sense_code_rid.InitHashTable( ST_SENSE_NUM_CODES );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_INVALID_DRIVE_NUMBER, IDS_ST_SENSE_LDRIVE_ERROR_INVALID_DRIVE_NUMBER );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_NOT_INITIALIZED, IDS_ST_SENSE_LDRIVE_ERROR_NOT_INITIALIZED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_HARDWARE_FAILURE, IDS_ST_SENSE_LDRIVE_ERROR_HARDWARE_FAILURE );                         				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_INVALID_DRIVE_TYPE, IDS_ST_SENSE_LDRIVE_ERROR_INVALID_DRIVE_TYPE );                       				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_INVALID_INFO_TYPE, IDS_ST_SENSE_LDRIVE_ERROR_INVALID_INFO_TYPE );                        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS, IDS_ST_SENSE_LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS );                     				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_WRITE_FAILURE, IDS_ST_SENSE_LDRIVE_ERROR_WRITE_FAILURE );                            				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_WRITE_PROTECTED, IDS_ST_SENSE_LDRIVE_ERROR_WRITE_PROTECTED );                          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS, IDS_ST_SENSE_LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS );                  				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR, IDS_ST_SENSE_LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR );           				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP, IDS_ST_SENSE_LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP );                    				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_WRITE_ABORT, IDS_ST_SENSE_LDRIVE_ERROR_WRITE_ABORT );                              				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_READ_FAILURE, IDS_ST_SENSE_LDRIVE_ERROR_READ_FAILURE );                             				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_MEDIA_NOT_ALLOCATED, IDS_ST_SENSE_LDRIVE_ERROR_MEDIA_NOT_ALLOCATED );                      				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED, IDS_ST_SENSE_LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED );          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_HARDWARE_FAILURE, IDS_ST_SENSE_LMEDIA_ERROR_HARDWARE_FAILURE );                         				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_INVALID_MEDIA_NUMBER, IDS_ST_SENSE_LMEDIA_ERROR_INVALID_MEDIA_NUMBER );                     				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_MEDIA_NOT_INITIALIZED, IDS_ST_SENSE_LMEDIA_ERROR_MEDIA_NOT_INITIALIZED );                    				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_MEDIA_NOT_DISCOVERED, IDS_ST_SENSE_LMEDIA_ERROR_MEDIA_NOT_DISCOVERED );                     				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE, IDS_ST_SENSE_LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE );                  				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_ALLOCATION_TO_LARGE, IDS_ST_SENSE_LMEDIA_ERROR_ALLOCATION_TO_LARGE );                      				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_MEDIA_NOT_ERASED, IDS_ST_SENSE_LMEDIA_ERROR_MEDIA_NOT_ERASED );                         				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_MEDIA_ERASED, IDS_ST_SENSE_LMEDIA_ERROR_MEDIA_ERASED );                             				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_NO_REGIONS_IN_MEDIA, IDS_ST_SENSE_LMEDIA_ERROR_NO_REGIONS_IN_MEDIA );                      				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_DRIVES_MAX_OUT, IDS_ST_SENSE_LMEDIA_ERROR_DRIVES_MAX_OUT );                           				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_MEDIA_WRITE_PROTECTED, IDS_ST_SENSE_LMEDIA_ERROR_MEDIA_WRITE_PROTECTED );                    				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_INVALID_INFO_TYPE, IDS_ST_SENSE_LMEDIA_ERROR_INVALID_INFO_TYPE );                        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT, IDS_ST_SENSE_LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT );                       				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_NOT_ALLOCATED, IDS_ST_SENSE_LMEDIA_ERROR_NOT_ALLOCATED );                            				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED, IDS_ST_SENSE_LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED, IDS_ST_SENSE_NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED );           				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW, IDS_ST_SENSE_ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW );                				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW, IDS_ST_SENSE_ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW );               				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS );    				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND );                				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS  );                				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 );       				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_SECTOR_NOT_UPDATED, IDS_ST_SENSE_NAND_DATA_DRIVE_SECTOR_NOT_UPDATED );                    				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP );        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT );        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE );			
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK );             				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_BBTABLE_FULL, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_BBTABLE_FULL );                    				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN );                 				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 );          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK );          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS );               				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK );          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 );          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 );          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED, IDS_ST_SENSE_NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED );              				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL );       				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED );        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED );            				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 );        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 );        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 );        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE );            				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS );     				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST );     				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG );      				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT );       				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED );        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT );     				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT );      				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED );            				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT );     				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED );         				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS );                				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT );           				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE );               				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR, IDS_ST_SENSE_NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NAND_DATA_DRVIE_ERROR_INVALID_RELATIVE_SECTOR, IDS_ST_SENSE_NAND_DATA_DRVIE_ERROR_INVALID_RELATIVE_SECTOR );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_NANDTYPE_MISMATCH, IDS_ST_SENSE_NANDHAL_ERROR_NANDTYPE_MISMATCH );                       				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_LOOKUP_ID_FAILED, IDS_ST_SENSE_NANDHAL_ERROR_LOOKUP_ID_FAILED );                        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_INIT_PORT, IDS_ST_SENSE_NANDHAL_ERROR_INIT_PORT );                               				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_WRITE_PORT_CMD, IDS_ST_SENSE_NANDHAL_ERROR_WRITE_PORT_CMD );                          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_WRITE_PORT_ADDR, IDS_ST_SENSE_NANDHAL_ERROR_WRITE_PORT_ADDR );                         				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_READ_PORT_DATA, IDS_ST_SENSE_NANDHAL_ERROR_READ_PORT_DATA );                          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_WAIT_FOR_READY_PORT, IDS_ST_SENSE_NANDHAL_ERROR_WAIT_FOR_READY_PORT );                     				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_POWER_UP_FLASH_PADS, IDS_ST_SENSE_NANDHAL_ERROR_POWER_UP_FLASH_PADS );                     				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_TERMINATE_PORT, IDS_ST_SENSE_NANDHAL_ERROR_TERMINATE_PORT );                          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_LOCKPORT_TIMEOUT, IDS_ST_SENSE_NANDHAL_ERROR_LOCKPORT_TIMEOUT );                        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_LOCKNAND_TIMEOUT, IDS_ST_SENSE_NANDHAL_ERROR_LOCKNAND_TIMEOUT );                        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_LOCKPORT_LOCKED, IDS_ST_SENSE_NANDHAL_ERROR_LOCKPORT_LOCKED );                         				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_LOCKNAND_LOCKED, IDS_ST_SENSE_NANDHAL_ERROR_LOCKNAND_LOCKED );                         				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_WRITE_DATA_PORT, IDS_ST_SENSE_NANDHAL_ERROR_WRITE_DATA_PORT );                         				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_GETSTATUS_FAILED, IDS_ST_SENSE_NANDHAL_ERROR_GETSTATUS_FAILED );                        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_WRITE_FAILED, IDS_ST_SENSE_NANDHAL_ERROR_WRITE_FAILED );                            				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_READ_FAILED, IDS_ST_SENSE_NANDHAL_ERROR_READ_FAILED );                             				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_READID1_FAILED, IDS_ST_SENSE_NANDHAL_ERROR_READID1_FAILED );                          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_READID2_FAILED, IDS_ST_SENSE_NANDHAL_ERROR_READID2_FAILED );                          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_READIDEXT_FAILED, IDS_ST_SENSE_NANDHAL_ERROR_READIDEXT_FAILED );                        				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_SETNANDBUSY_FAILED, IDS_ST_SENSE_NANDHAL_ERROR_SETNANDBUSY_FAILED );                      				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR, IDS_ST_SENSE_NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR );                  				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_COMPUTE_ECC_SUCCESS, IDS_ST_SENSE_COMPUTE_ECC_SUCCESS );                                   				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_COMPUTE_ECC_NOT_DONE, IDS_ST_SENSE_COMPUTE_ECC_NOT_DONE );                                  				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_LOCKECC_TIMEOUT, IDS_ST_SENSE_NANDHAL_ERROR_LOCKECC_TIMEOUT );                         				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ERROR_LOCKECC_LOCKED, IDS_ST_SENSE_NANDHAL_ERROR_LOCKECC_LOCKED );                          				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ECC_ERROR_FIXED, IDS_ST_SENSE_NANDHAL_ECC_ERROR_FIXED );                               				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_NANDHAL_ECC_FIX_FAILED, IDS_ST_SENSE_NANDHAL_ECC_FIX_FAILED );                                				
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED,						IDS_ST_SENSE_MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_ERROR_RESET_FAILED,							IDS_ST_SENSE_MMC_MEDIA_ERROR_RESET_FAILED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_APP_COMMAND_FAILED,							IDS_ST_SENSE_MMC_MEDIA_APP_COMMAND_FAILED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_ERROR_INIT_FAILED,								IDS_ST_SENSE_MMC_MEDIA_ERROR_INIT_FAILED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_ERROR_SEND_OP_TIMEOUT,							IDS_ST_SENSE_MMC_MEDIA_ERROR_SEND_OP_TIMEOUT );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_READ_OCR_FAILED,								IDS_ST_SENSE_MMC_MEDIA_READ_OCR_FAILED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES,						IDS_ST_SENSE_MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_READ_CSD_FAILED,								IDS_ST_SENSE_MMC_MEDIA_READ_CSD_FAILED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_INVALID_CSD_VERSION,							IDS_ST_SENSE_MMC_MEDIA_INVALID_CSD_VERSION );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_READ_CID_FAILED,								IDS_ST_SENSE_MMC_MEDIA_READ_CID_FAILED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MEDIA_INVALID_CID,									IDS_ST_SENSE_MMC_MEDIA_INVALID_CID );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED,				IDS_ST_SENSE_MMC_MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_MEDIA_ERROR_NOT_FORMATTED,						IDS_ST_SENSE_MMC_MMC_MEDIA_ERROR_NOT_FORMATTED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_MEDIA_ERROR_NOT_ENUMERATED,						IDS_ST_SENSE_MMC_MMC_MEDIA_ERROR_NOT_ENUMERATED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL,				IDS_ST_SENSE_MMC_MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_DATA_DRIVE_ERROR_INVALID_SECTOR,					IDS_ST_SENSE_MMC_MMC_DATA_DRIVE_ERROR_INVALID_SECTOR );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL,				IDS_ST_SENSE_MMC_MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED,				IDS_ST_SENSE_MMC_MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_DATA_DRIVE_ERROR_ERASE_FAILED,					IDS_ST_SENSE_MMC_MMC_DATA_DRIVE_ERROR_ERASE_FAILED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED,				IDS_ST_SENSE_MMC_MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED,			IDS_ST_SENSE_MMC_MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SPI_BUS_BLOCKED,						IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SPI_BUS_BLOCKED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED,					IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED,				IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SPI_BUS_INIT_FAILED,					IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SPI_BUS_INIT_FAILED );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_NO_COMMAND_RESPONSE,					IDS_ST_SENSE_MMC_MMC_HAL_ERROR_NO_COMMAND_RESPONSE );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_START_BYTE,						IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_START_BYTE );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_WRITE_STATUS,						IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_WRITE_STATUS );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS,					IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_START_BYTE_TIMEOUT,					IDS_ST_SENSE_MMC_MMC_HAL_ERROR_START_BYTE_TIMEOUT );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT,					IDS_ST_SENSE_MMC_MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT,				IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT,					IDS_ST_SENSE_MMC_MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_REGISTER_READ_TIMEOUT,					IDS_ST_SENSE_MMC_MMC_HAL_ERROR_REGISTER_READ_TIMEOUT );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD0,	IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD0 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD1,	IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD1 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD9,	IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD9 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD10, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD10 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD12, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD12 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD13, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD13 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD16, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD16 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD17, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD17 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD18, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD18 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD23, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD23 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD24, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD24 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD25, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD25 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD27, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD27 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD28, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD28 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD29, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD29 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD30, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD30 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD32, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD32 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD33, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD33 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD35, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD35 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD36, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD36 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD38, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD38 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD42, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD42 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD55, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD55 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD56, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD56 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD58, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD58 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD59, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_CMD_FAIL_CMD59 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0,	IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1,	IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9,	IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10,  IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59, IDS_ST_SENSE_MMC_MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13,			IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22,			IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23,			IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41,			IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42,			IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 );
	m_p_map_sense_code_rid.SetAt( ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51,			IDS_ST_SENSE_MMC_MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 );

	wstring dllname(L"");
    m_p_config_info = _p_config_info;
/*
	LoadResourceLibrary( _default_language, m_h_string_res, dllname );
	if( !m_h_string_res )
	{
		m_last_error = STERR_FAILED_TO_LOAD_RESOURCE_DLL;
		m_system_last_error = ::GetLastError();
		((CStUpdaterApp*)AfxGetApp())->GetUpdater()->GetErrorObject()->SaveStatus(this, dllname);
	}
*/
	m_logging_language_id = _default_language;
	m_default_language = _default_language;
//	m_h_string_res_logging = m_h_string_res;
	m_h_string_res_logging = (HINSTANCE)::GetModuleHandle( NULL );
}

CStResource::~CStResource()
{
/*
	if( m_h_string_res_logging != m_h_string_res )
	{
		::FreeLibrary(m_h_string_res_logging);
	}

	if( m_h_string_res )
	{
		::FreeLibrary(m_h_string_res);
	}
*/
}



ST_ERROR CStResource::GetResourceString( int _res_id, CString& _str, BOOL _for_logging_only )
{
	//
	// Resolve all %s or %whatever here if any.
	//

	BOOL result=TRUE;

	if( ( _res_id >= IDS_CFG_STRINGS_START ) && ( _res_id <= IDS_CFG_STRINGS_END ) ) 
	{
		result = _str.LoadStringW(_res_id);
		if( !result )
		{
		MessageBox(NULL, L"failed to load string", L"", MB_OK);
			m_last_error = STERR_FAILED_TO_LOAD_STRING;
			m_system_last_error = ::GetLastError();
			((CStUpdaterApp*)AfxGetApp())->GetUpdater()->GetErrorObject()->SaveStatus(this);
			return m_last_error;
		}
		return STERR_NONE;
	}
	else


	if( _for_logging_only )
	{
//		result = _str.LoadString(m_h_string_res_logging, _res_id);
		result = _str.LoadStringW(_res_id);
	}
	else
	{
//		result = _str.LoadString(m_h_string_res, _res_id);
		result = _str.LoadStringW(_res_id);
	}

	if( _res_id == IDS_LOGGING_LAST_SYSTEM_ERROR )
	{
		LANGID language = MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT); // Default language
		if( _for_logging_only )
		{
			language = m_logging_language_id;
		}
		LPVOID lpMsgBuf;

		::FormatMessage( 
			FORMAT_MESSAGE_ALLOCATE_BUFFER | 
			FORMAT_MESSAGE_FROM_SYSTEM | 
			FORMAT_MESSAGE_IGNORE_INSERTS,
			NULL,
			((CStUpdaterApp*)AfxGetApp())->GetUpdater()->GetErrorObject()->GetSystemLastError(),
			language,
			(LPTSTR) &lpMsgBuf,
			0,
			NULL 
		);
			
		_str += CString((wchar_t*)lpMsgBuf);

			// Free the buffer.
		LocalFree( lpMsgBuf );
	}
	if( !result )
	{
		m_last_error = STERR_FAILED_TO_LOAD_STRING;
		m_system_last_error = ::GetLastError();
		((CStUpdaterApp*)AfxGetApp())->GetUpdater()->GetErrorObject()->SaveStatus(this);
		return m_last_error;
	}

	switch( _res_id )
	{
	case IDS_CAPTION_INITIALIZING:
	case IDS_CAPTION_RECOVERY:
		{
			wstring wstr;	
			LANGID language = ((CStUpdaterApp*) AfxGetApp())->GetLangId();

			m_p_config_info->ApplicationName(wstr, language);

			if( PRIMARYLANGID( language ) == LANG_KOREAN )
			{
				_str = CString(wstr.c_str()) + " " + _str + "...";
			}
			else
			{
				_str += " " + CString(wstr.c_str()) + "...";
			}
		}
		break;
	}

	return STERR_NONE;
}

ST_ERROR CStResource::GetResourceString(int _res_id, CString& _str, UCHAR _drive_num, BOOL _for_logging_only )
{
	wstring wstr;
	CString format;
	ST_ERROR err = STERR_NONE;

	err = m_p_config_info->GetSystemDriveDescription(_drive_num, wstr);
	if( err != STERR_NONE )
		return err;
	switch( _res_id )
	{
	case IDS_STAT_ERASE_DRIVE:
	case IDS_STAT_WRITING_SYSTEM_DRIVE:
		GetResourceString( _res_id, format, _for_logging_only);
		_str.Format( format, wstr.c_str() );
		break;

	default :
		GetResourceString( _res_id, _str);
		break;
	}
	return err;
}

ST_ERROR CStResource::GetErrorMessage( ST_ERROR _err, CString& _str, BOOL _for_logging_only )
{
	if( _err > STERR_BEGIN || _err < STERR_END )
	{
		_str = "";
		return STERR_ERROR_OUT_OF_RANGE;
	}

	int rid;
	m_p_map_err_rid.Lookup( _err, rid );
	return GetResourceString( rid, _str, _for_logging_only );
}

CString CStResource::GetTitle()
{
	wstring wstr;	
	LANGID language = ((CStUpdaterApp*) AfxGetApp())->GetLangId();

	m_p_config_info->ApplicationName(wstr, language);
	return wstr.c_str();
}

CString CStResource::GetAboutVersionString()
{
	CString version;
	CString versionText;
	version.Format(L"%d.%d.%d.%03d",
		*((USHORT *)GetDefaultCfgResource(IDR_CFG_UPD_MAJOR_VERSION, sizeof(USHORT))),
		*((USHORT *)GetDefaultCfgResource(IDR_CFG_UPD_MINOR_VERSION, sizeof(USHORT))),
		*((USHORT *)GetDefaultCfgResource(IDR_CFG_PROD_MAJOR_VERSION, sizeof(USHORT))),
		*((USHORT *)GetDefaultCfgResource(IDR_CFG_PROD_MINOR_VERSION, sizeof(USHORT))));

	GetResourceString( IDS_ABOUTBOX_VERSION, versionText );
	versionText += version;
	return versionText;
}

CString CStResource::GetVersionString()
{
	CString version;
	version.Format(L"%d.%d.%d.%03d",
		*((USHORT *)GetDefaultCfgResource(IDR_CFG_UPD_MAJOR_VERSION, sizeof(USHORT))),
		*((USHORT *)GetDefaultCfgResource(IDR_CFG_UPD_MINOR_VERSION, sizeof(USHORT))),
		*((USHORT *)GetDefaultCfgResource(IDR_CFG_PROD_MAJOR_VERSION, sizeof(USHORT))),
		*((USHORT *)GetDefaultCfgResource(IDR_CFG_PROD_MINOR_VERSION, sizeof(USHORT))));

	return version;
}

void CStResource::GetTaskName(TASK_TYPE _task, CString& _task_name, BOOL _for_logging_only )
{
	CStResource *				p_resource	= ((CStUpdaterApp*)AfxGetApp())->GetResource();
	wstring                     wstr;
    UCHAR                       booty_index=0;
    
    m_p_config_info->GetBootyDriveIndex(booty_index);

	switch( _task )
	{
		case TASK_TYPE_INITIALIZE:
			p_resource->GetResourceString( IDS_STAT_INITIALIZING, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_LOCKING_DRIVES:
			p_resource->GetResourceString( IDS_STAT_LOCKING, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_MEDIA:
			p_resource->GetResourceString( IDS_STAT_ERASE_MEDIA, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_ALLOCATING_TABLES:
			p_resource->GetResourceString( IDS_STAT_ALLOCATING_TABLES, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_VERIFY_QUICK:
			p_resource->GetResourceString( IDS_STAT_VERIFY_QUICK, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_HIDDENDRIVE1:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, 1+0, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_HIDDENDRIVE1:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, 1+0, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_HIDDENDRIVE2:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, 1+1, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_HIDDENDRIVE2:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, 1+1, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_HIDDENDRIVE3:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, 1+2, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_HIDDENDRIVE3:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, 1+2, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_HIDDENDRIVE4:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, 1+3, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_HIDDENDRIVE4:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, 1+3, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_HIDDENDRIVE5:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, 1+4, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_HIDDENDRIVE5:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, 1+4, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_HIDDENDRIVE6:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, 1+5, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_HIDDENDRIVE6:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, 1+5, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_HIDDENDRIVE7:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, 1+6, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_HIDDENDRIVE7:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, 1+6, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_HIDDENDRIVE8:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, 1+7, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_HIDDENDRIVE8:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, 1+7, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_HIDDENDRIVE9:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, 1+8, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_HIDDENDRIVE9:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, 1+8, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_HIDDENDRIVE10:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, 1+9, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_HIDDENDRIVE10:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, 1+9, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_SYSTEMDRIVE1:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, booty_index+0, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_SYSTEMDRIVE1:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, booty_index+0, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_SYSTEMDRIVE2:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, booty_index+1, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_SYSTEMDRIVE2:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, booty_index+1, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_SYSTEMDRIVE3:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, booty_index+2, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_SYSTEMDRIVE3:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, booty_index+2, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_SYSTEMDRIVE4:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, booty_index+3, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_SYSTEMDRIVE4:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, booty_index+3, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_SYSTEMDRIVE5:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, booty_index+4, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_SYSTEMDRIVE5:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, booty_index+4, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_SYSTEMDRIVE6:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, booty_index+5, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_SYSTEMDRIVE6:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, booty_index+5, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_SYSTEMDRIVE7:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, booty_index+6, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_SYSTEMDRIVE7:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, booty_index+6, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_SYSTEMDRIVE8:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, booty_index+7, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_SYSTEMDRIVE8:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, booty_index+7, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_SYSTEMDRIVE9:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, booty_index+8, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_SYSTEMDRIVE9:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, booty_index+8, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_SYSTEMDRIVE10:
			p_resource->GetResourceString( IDS_STAT_ERASE_DRIVE, _task_name, booty_index+9, _for_logging_only );
			break;
		case TASK_TYPE_UPDATE_SYSTEMDRIVE10:
			p_resource->GetResourceString( IDS_STAT_WRITING_SYSTEM_DRIVE, _task_name, booty_index+9, _for_logging_only );
			break;
		case TASK_TYPE_ERASE_DATADRIVE:
			p_resource->GetResourceString( IDS_STAT_ERASE_DATADRIVE, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_DATADRIVE:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_DATADRIVE, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_MBR:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_MBR, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_HIDDEN_SECTORS:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_HIDDEN_SECTORS, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_PBS:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_PBS, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_FAT_AREA1:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_FAT_AREA1, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_FAT_AREA2:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_FAT_AREA2, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_FAT_AREA3:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_FAT_AREA3, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_FAT_AREA4:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_FAT_AREA4, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_FAT_AREA5:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_FAT_AREA5, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_FAT_AREA6:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_FAT_AREA6, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_FAT_AREA7:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_FAT_AREA7, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_FAT_AREA8:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_FAT_AREA8, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_FAT_AREA9:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_FAT_AREA9, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_FAT_AREA10:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_FAT_AREA10, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_FORMATTING_DIRECTORY_STRUCTURE:
			p_resource->GetResourceString( IDS_STAT_FORMATTING_DIRECTORY_STRUCTURE, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_UNLOCKING_DRIVES:
			p_resource->GetResourceString( IDS_STAT_UNLOCKING, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_CLOSING_DEVICE:
			p_resource->GetResourceString( IDS_STAT_CLOSING_DEVICE, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_ERROR_OCCURED:
			p_resource->GetResourceString( IDS_STAT_ERROR, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_DEVICE_REFRESH:
			p_resource->GetResourceString( IDS_STAT_DEVICE_REFRESH, _task_name, _for_logging_only );
			break;
		case TASK_TYPE_COMPLETED:
			p_resource->GetResourceString( IDS_STAT_COMPLETED, _task_name, _for_logging_only );
			break;
        case TASK_TYPE_TRANSFER_2DD_CONTENT:
            p_resource->GetResourceString( IDS_STAT_2DD_TRANSFER, _task_name, _for_logging_only);
            break;
        case TASK_TYPE_WAIT_FOR_INIT:
            p_resource->GetResourceString( IDS_STAT_WAIT_FOR_INIT, _task_name, _for_logging_only);
            break;
        case TASK_TYPE_SAVE_HDS:
            p_resource->GetResourceString( IDS_STAT_SAVING_LICENSE_INFO, _task_name, _for_logging_only);
            break;
        case TASK_TYPE_RESTORE_HDS:
            p_resource->GetResourceString( IDS_STAT_RESTORING_LICENSE_INFO, _task_name, _for_logging_only);
            break;
        case TASK_TYPE_INIT_DEVICE_INTERFACE:
            p_resource->GetResourceString( IDS_STAT_WAIT_FOR_INIT, _task_name, _for_logging_only);
            break;
		case TASK_TYPE_READY:
            p_resource->GetResourceString( IDS_STAT_READY, _task_name, _for_logging_only);
			break;
		case TASK_TYPE_NO_DEVICE:
            p_resource->GetResourceString( IDS_STAT_NO_DEVICE, _task_name, _for_logging_only);
			break;
		case TASK_TYPE_DETECTING_DEVICE:
            p_resource->GetResourceString( IDS_STAT_DETECTING_DEVICE, _task_name, _for_logging_only);
			break;
		case TASK_TYPE_NONE:
		default:
			_task_name = "";
			break;
	}
}

//
// assumption: the string in the string table for _err must have a %s.
//
ST_ERROR CStResource::GetErrorMessage(ST_ERROR _err, CString& _msg, UCHAR _drive_index, BOOL _for_logging_only )
{
	ST_ERROR err = STERR_NONE;
	string drive_name;

	m_p_config_info->GetSystemDriveName(_drive_index, drive_name);	

	CString format;
	err = GetErrorMessage( _err, format, _for_logging_only );
	if( err != STERR_NONE )
	{
		err = GetErrorMessage( err, _msg, _for_logging_only );
		return err;
	}
	
	_msg.Format( format, CString(drive_name.c_str()) );

	return STERR_NONE;
}

ST_ERROR CStResource::LoadIcon(int _res_id, HICON& _icon)
{
	int height = 16;
	int width = 16;
	if( _res_id == IDI_COMPANY_ICON )
	{	
		height = 32;
		width = 32;
	}

	_icon = (HICON) ::LoadImage( AfxGetApp()->m_hInstance, MAKEINTRESOURCE( _res_id ), IMAGE_ICON,
		width, height, LR_SHARED );
	if( !_icon )
	{
		m_last_error = STERR_FAILED_TO_LOAD_ICON;
		m_system_last_error = ::GetLastError();
		((CStUpdaterApp*)AfxGetApp())->GetUpdater()->GetErrorObject()->SaveStatus(this);
		return m_last_error;
	}
	return STERR_NONE;
}

ST_ERROR CStResource::LoadBitmap(int _res_id, HBITMAP& _bitmap)
{

	_bitmap = (HBITMAP) ::LoadImage( AfxGetApp()->m_hInstance, MAKEINTRESOURCE( _res_id ), IMAGE_BITMAP,
		0, 0, LR_SHARED );
	if( !_bitmap )
	{
		m_last_error = STERR_FAILED_TO_LOAD_BMP;
		m_system_last_error = ::GetLastError();
		((CStUpdaterApp*)AfxGetApp())->GetUpdater()->GetErrorObject()->SaveStatus(this);
		return m_last_error;
	}
	return STERR_NONE;
}

ST_ERROR CStResource::GetErrorMessage(USHORT _sense_code, wstring& _msg, BOOL _for_logging_only )
{
	ST_ERROR	err = STERR_NONE;
	CString		str;
	int			rid;

	if( !m_p_map_sense_code_rid.Lookup( _sense_code, rid ) )
	{	
		rid = IDS_ST_SENSE_CODE_UNDEFINED;
	}

	err = GetResourceString( rid, str, _for_logging_only  );

	_msg = wstring( str );

	if( rid == IDS_ST_SENSE_CODE_UNDEFINED )
		return STERR_UNKNOWN_VENDOR_SPECIFIC_SENSE_CODE;
	return err;
}



void CStResource::SetLoggingTo(LANGID _langid)
{
	wstring dllname(L"");
	m_logging_language_id = _langid;
/*
	LoadResourceLibrary( m_logging_language_id, m_h_string_res_logging, dllname );
	if( !m_h_string_res_logging )
	{
		m_last_error = STERR_FAILED_TO_LOAD_RESOURCE_DLL;
		m_system_last_error = ::GetLastError();
		((CStUpdaterApp*)AfxGetApp())->GetUpdater()->GetErrorObject()->SaveStatus(this, dllname);
	}
*/
}

ST_ERROR CStResource::GetResourceString( int _res_id, wstring& _res_string )
{
	ST_ERROR err = STERR_NONE;
	CString str;

	err = GetResourceString( _res_id, str );
	if( err != STERR_NONE )
		return err;

	_res_string = wstring( str );

	return err;
}

LPVOID CStResource::GetDefaultCfgResource(int _res_id, DWORD _size)
{
   	HRSRC hResInfo;
	HGLOBAL hRes;
	LPVOID pPtr = NULL;

    hResInfo = FindResourceEx( GetModuleHandle(NULL),
	    					L_STMP_RESINFO_TYPE,
		    				MAKEINTRESOURCE(_res_id),
			    			MAKELANGID(LANG_INVARIANT, SUBLANG_NEUTRAL));
    if ( hResInfo )
    {
		DWORD dwSize = SizeofResource(GetModuleHandle(NULL), hResInfo);

		if (dwSize <= _size)
		{
		    hRes = LoadResource(GetModuleHandle(NULL), hResInfo);
   			if ( hRes )
    			pPtr = LockResource(hRes);
		}
	}
	return pPtr;
}
