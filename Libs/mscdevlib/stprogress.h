// StProgress.h: interface for the CStProgress class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_STPROGRESS_H__0CC7F0E0_AF6A_4A9A_AF61_C55442D93668__INCLUDED_)
#define AFX_STPROGRESS_H__0CC7F0E0_AF6A_4A9A_AF61_C55442D93668__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

typedef enum _TASK_TYPE {
	TASK_TYPE_NONE = 1,
	TASK_TYPE_INITIALIZE,
	TASK_TYPE_LOCKING_DRIVES,
    TASK_TYPE_ERASE_MEDIA,
	TASK_TYPE_ALLOCATING_TABLES,
	TASK_TYPE_VERIFY_QUICK,
    TASK_TYPE_ERASE_HIDDENDRIVE,
	TASK_TYPE_ERASE_HIDDENDRIVE1,
	TASK_TYPE_ERASE_HIDDENDRIVE2,
	TASK_TYPE_ERASE_HIDDENDRIVE3,
	TASK_TYPE_ERASE_HIDDENDRIVE4,
	TASK_TYPE_ERASE_HIDDENDRIVE5,
	TASK_TYPE_ERASE_HIDDENDRIVE6,
	TASK_TYPE_ERASE_HIDDENDRIVE7,
	TASK_TYPE_ERASE_HIDDENDRIVE8,
	TASK_TYPE_ERASE_HIDDENDRIVE9,
	TASK_TYPE_ERASE_HIDDENDRIVE10,
	TASK_TYPE_UPDATE_HIDDENDRIVE,
	TASK_TYPE_UPDATE_HIDDENDRIVE1,
	TASK_TYPE_UPDATE_HIDDENDRIVE2,
	TASK_TYPE_UPDATE_HIDDENDRIVE3,
	TASK_TYPE_UPDATE_HIDDENDRIVE4,
	TASK_TYPE_UPDATE_HIDDENDRIVE5,
	TASK_TYPE_UPDATE_HIDDENDRIVE6,
	TASK_TYPE_UPDATE_HIDDENDRIVE7,
	TASK_TYPE_UPDATE_HIDDENDRIVE8,
	TASK_TYPE_UPDATE_HIDDENDRIVE9,
	TASK_TYPE_UPDATE_HIDDENDRIVE10,
	TASK_TYPE_ERASE_SYSTEMDRIVE,
	TASK_TYPE_ERASE_SYSTEMDRIVE1,
	TASK_TYPE_ERASE_SYSTEMDRIVE2,
	TASK_TYPE_ERASE_SYSTEMDRIVE3,
	TASK_TYPE_ERASE_SYSTEMDRIVE4,
	TASK_TYPE_ERASE_SYSTEMDRIVE5,
	TASK_TYPE_ERASE_SYSTEMDRIVE6,
	TASK_TYPE_ERASE_SYSTEMDRIVE7,
	TASK_TYPE_ERASE_SYSTEMDRIVE8,
	TASK_TYPE_ERASE_SYSTEMDRIVE9,
	TASK_TYPE_ERASE_SYSTEMDRIVE10,
	TASK_TYPE_UPDATE_SYSTEMDRIVE,
	TASK_TYPE_UPDATE_SYSTEMDRIVE1,
	TASK_TYPE_UPDATE_SYSTEMDRIVE2,
	TASK_TYPE_UPDATE_SYSTEMDRIVE3,
	TASK_TYPE_UPDATE_SYSTEMDRIVE4,
	TASK_TYPE_UPDATE_SYSTEMDRIVE5,
	TASK_TYPE_UPDATE_SYSTEMDRIVE6,
	TASK_TYPE_UPDATE_SYSTEMDRIVE7,
	TASK_TYPE_UPDATE_SYSTEMDRIVE8,
	TASK_TYPE_UPDATE_SYSTEMDRIVE9,
	TASK_TYPE_UPDATE_SYSTEMDRIVE10,
	TASK_TYPE_ERASE_DATADRIVE,
	TASK_TYPE_FORMATTING_DATADRIVE,
	TASK_TYPE_FORMATTING_MBR,
	TASK_TYPE_FORMATTING_HIDDEN_SECTORS,
	TASK_TYPE_FORMATTING_PBS,
	TASK_TYPE_FORMATTING_FAT_AREA,
	TASK_TYPE_FORMATTING_FAT_AREA1,
	TASK_TYPE_FORMATTING_FAT_AREA2,
	TASK_TYPE_FORMATTING_FAT_AREA3,
	TASK_TYPE_FORMATTING_FAT_AREA4,
	TASK_TYPE_FORMATTING_FAT_AREA5,
	TASK_TYPE_FORMATTING_FAT_AREA6,
	TASK_TYPE_FORMATTING_FAT_AREA7,
	TASK_TYPE_FORMATTING_FAT_AREA8,
	TASK_TYPE_FORMATTING_FAT_AREA9,
	TASK_TYPE_FORMATTING_FAT_AREA10,
	TASK_TYPE_FORMATTING_DIRECTORY_STRUCTURE,
	TASK_TYPE_UNLOCKING_DRIVES,
	TASK_TYPE_CLOSING_DEVICE,
	TASK_TYPE_DEVICE_REFRESH,
	TASK_TYPE_ERROR_OCCURED,
	TASK_TYPE_COMPLETED,
    TASK_TYPE_TRANSFER_2DD_CONTENT,
    TASK_TYPE_WAIT_FOR_INIT,
    TASK_TYPE_SAVE_HDS,
    TASK_TYPE_RESTORE_HDS,
    TASK_TYPE_INIT_DEVICE_INTERFACE,
	TASK_TYPE_READY,
	TASK_TYPE_NO_DEVICE,
    TASK_TYPE_DETECTING_DEVICE
} TASK_TYPE, *PTASK_TYPE;
/*

#define TASK_TIME_NONE								0
#define TASK_TIME_INITIALIZE						1
#define TASK_TIME_LOCKING_DRIVES					1
#define TASK_TIME_ALLOCATING_TABLES					2
#define TASK_TIME_VERIFY_QUICK						2
#define TASK_TIME_ERASE_SYSTEMDRIVE1				2
#define TASK_TIME_UPDATE_SYSTEMDRIVE1				3
#define TASK_TIME_ERASE_SYSTEMDRIVE2				2
#define TASK_TIME_UPDATE_SYSTEMDRIVE2				3
#define TASK_TIME_ERASE_SYSTEMDRIVE3				2
#define TASK_TIME_UPDATE_SYSTEMDRIVE3				3
#define TASK_TIME_ERASE_SYSTEMDRIVE4				2
#define TASK_TIME_UPDATE_SYSTEMDRIVE4				3
#define TASK_TIME_ERASE_SYSTEMDRIVE5				2
#define	TASK_TIME_UPDATE_SYSTEMDRIVE5				3
#define	TASK_TIME_ERASE_SYSTEMDRIVE6				2
#define	TASK_TIME_UPDATE_SYSTEMDRIVE6				3
#define	TASK_TIME_ERASE_SYSTEMDRIVE7				2
#define	TASK_TIME_UPDATE_SYSTEMDRIVE7				3
#define	TASK_TIME_ERASE_SYSTEMDRIVE8				2
#define	TASK_TIME_UPDATE_SYSTEMDRIVE8				3
#define	TASK_TIME_ERASE_SYSTEMDRIVE9				2
#define	TASK_TIME_UPDATE_SYSTEMDRIVE9				3
#define	TASK_TIME_ERASE_SYSTEMDRIVE10				2
#define	TASK_TIME_UPDATE_SYSTEMDRIVE10				3
#define TASK_TIME_ERASE_DATADRIVE					2
#define	TASK_TIME_FORMATTING_DATADRIVE				3
#define	TASK_TIME_UNLOCKING_DRIVES					1
#define	TASK_TIME_CLOSING_DEVICE					1
#define	TASK_TIME_ERROR_OCCURED						0
#define	TASK_TIME_COMPLETED							0

typedef map<int, int, less<int> > CStMap_Task_Time;
*/
class CStProgress 
{
public:
	CStProgress(string name="CStProgress");
	virtual ~CStProgress();

	virtual void SetTotalTasks(ULONG _total_tasks)=0;
	virtual void SetCurrentTask(TASK_TYPE _task, ULONG _range)=0;
	virtual void SetCurrentTask(TASK_TYPE /*_task*/, ULONG /*_range*/, UCHAR /*_drive_index*/){};

	virtual void UpdateProgress(BOOL _step_it=TRUE)=0;
	virtual void UpdateGrandProgress()=0;
	virtual void StartSearch(){}
	virtual void UpdateDeviceMode()=0;


	virtual ST_ERROR Begin();
	virtual void Relax();
	BOOL InProgress();

	TASK_TYPE GetCurrentTask() { return m_current_task; }
	ULONG GetTaskRange() { return m_task_range; }

protected:

	ULONG				m_total_tasks;
	ULONG				m_task_range;
	TASK_TYPE			m_current_task;
	BOOL				m_in_progress;
//	CStMap_Task_Time	m_map_task_time;

};

#endif // !defined(AFX_STPROGRESS_H__0CC7F0E0_AF6A_4A9A_AF61_C55442D93668__INCLUDED_)
